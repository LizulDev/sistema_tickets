-- MySQL Script generated by MySQL Workbench
-- Wed Jun 18 21:19:07 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

-- -----------------------------------------------------
-- Schema atividade_final_venda_tickets
-- -----------------------------------------------------
DROP DATABASE IF EXISTS atividade_final_venda_tickets;
CREATE DATABASE IF NOT EXISTS atividade_final_venda_tickets;
USE atividade_final_venda_tickets;

-- -----------------------------------------------------
-- Table usuarios
-- -----------------------------------------------------
CREATE TABLE usuarios (
  id INT NOT NULL AUTO_INCREMENT,
  nome VARCHAR(255) NULL,
  idade INT NULL,
  cpf CHAR(11) NULL,
  tipo_usuario VARCHAR(255) NULL,
  PRIMARY KEY (id));

-- -----------------------------------------------------
-- Table categorias
-- -----------------------------------------------------
CREATE TABLE categorias (
  id INT NOT NULL AUTO_INCREMENT,
  tipo VARCHAR(255) NULL,
  restricao_idade CHAR(10) NULL,
  PRIMARY KEY (id));

-- -----------------------------------------------------
-- Table status_evento
-- -----------------------------------------------------
CREATE TABLE status_evento (
  id INT NOT NULL AUTO_INCREMENT,
  descricao VARCHAR(100) NULL,
  PRIMARY KEY (id));

-- -----------------------------------------------------
-- Table eventos
-- -----------------------------------------------------
CREATE TABLE eventos (
  id INT NOT NULL AUTO_INCREMENT,
  data_evento DATE NULL,
  nome VARCHAR(255) NULL,
  descricao VARCHAR(511) NULL,
  status_evento_id INT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (status_evento_id)
    REFERENCES status_evento (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- -----------------------------------------------------
-- Table lotes
-- -----------------------------------------------------
CREATE TABLE lotes (
  id INT NOT NULL AUTO_INCREMENT,
  quantidade INT NULL,
  validade_ticket DATETIME NULL,
  eventos_id INT NOT NULL,
  PRIMARY KEY (id),
--  INDEX fk_lotes_eventos1_idx (eventos_id ASC) VISIBLE,
--  CONSTRAINT fk_lotes_eventos1
    FOREIGN KEY (eventos_id)
    REFERENCES eventos (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table notificacoes
-- -----------------------------------------------------
CREATE TABLE notificacoes (
  id INT NOT NULL,
  tipo VARCHAR(255) NULL,
  mensagem VARCHAR(255) NULL,
  lida TINYINT NULL,
  data_notificacao DATETIME NULL,
  usuario_id INT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (usuario_id)
    REFERENCES usuarios (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

-- -----------------------------------------------------
-- Table locais
-- -----------------------------------------------------
CREATE TABLE locais (
  id INT NOT NULL AUTO_INCREMENT,
  cidade VARCHAR(255) NULL,
  bairro VARCHAR(255) NULL,
  ponto_referencia VARCHAR(255) NULL,
  evento_id INT NOT NULL,
  PRIMARY KEY (id),
 -- INDEX fk_locais_eventos_eventos1_idx (evento_id ASC) VISIBLE,
 -- CONSTRAINT fk_locais_eventos_eventos1
    FOREIGN KEY (evento_id)
    REFERENCES eventos (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table tickets
-- -----------------------------------------------------
CREATE TABLE tickets (
  id INT NOT NULL AUTO_INCREMENT,
  data_compra DATETIME NULL,
  meia_entrada TINYINT NULL,
  lote_id INT NULL,
  usuario_id INT NOT NULL,
  evento_id INT NOT NULL,
  PRIMARY KEY (id),
--  INDEX fk_tickets_lotes1_idx (lote_id ASC) VISIBLE,
 -- INDEX fk_tickets_usuarios1_idx (usuario_id ASC) VISIBLE,
 -- INDEX fk_tickets_eventos1_idx (evento_id ASC) VISIBLE,
--  CONSTRAINT fk_tickets_lotes1
    FOREIGN KEY (lote_id)
    REFERENCES lotes (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
--  CONSTRAINT fk_tickets_usuarios1
    FOREIGN KEY (usuario_id)
    REFERENCES usuarios (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
--  CONSTRAINT fk_tickets_eventos1
    FOREIGN KEY (evento_id)
    REFERENCES eventos (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table cobrancas
-- -----------------------------------------------------
CREATE TABLE cobrancas (
  id INT NOT NULL AUTO_INCREMENT,
  data_compra DATETIME NULL,
  tipo VARCHAR(255) NULL,
  valor_evento DECIMAL(6,2) NULL,
  usuario_id INT NOT NULL,
  tickets_id INT NOT NULL,
  PRIMARY KEY (id),
--  INDEX fk_cobrancas_usuarios_idx (usuario_id ASC) VISIBLE,
--  INDEX fk_cobrancas_tickets1_idx (tickets_id ASC) VISIBLE,
--  CONSTRAINT fk_cobrancas_usuarios
    FOREIGN KEY (usuario_id)
    REFERENCES usuarios (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
--  CONSTRAINT fk_cobrancas_tickets1
    FOREIGN KEY (tickets_id)
    REFERENCES tickets (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table categoria_evento
-- -----------------------------------------------------
CREATE TABLE categoria_evento (
  id INT NOT NULL AUTO_INCREMENT,
  categoria_id INT NOT NULL,
  evento_id INT NOT NULL,
  PRIMARY KEY (id),
--  INDEX fk_categoria_evento_categorias_eventos1_idx (categoria_id ASC) VISIBLE,
--  INDEX fk_categoria_evento_eventos1_idx (evento_id ASC) VISIBLE,
--  CONSTRAINT fk_categoria_evento_categorias_eventos1
    FOREIGN KEY (categoria_id)
    REFERENCES categorias (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
--  CONSTRAINT fk_categoria_evento_eventos1
    FOREIGN KEY (evento_id)
    REFERENCES eventos (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE TABLE log_compras (
  id INT AUTO_INCREMENT PRIMARY KEY,
  ticket_id INT,
  usuario_id INT,
  evento_id INT,
  data_compra DATETIME,
  acao VARCHAR(50), 
  criado_em DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE log_cobrancas (
  id INT AUTO_INCREMENT PRIMARY KEY,
  data_log DATETIME NOT NULL,
  usuario_id INT,
  tickets_id INT,
  tipo_pagamento VARCHAR(255),
  valor DECIMAL(6,2),
  acao VARCHAR(50)
);

CREATE TABLE relatorio_tickets_usuarios (
  usuario_id INT,
  nome_usuario VARCHAR(255),
  total_tickets INT
);

INSERT INTO usuarios (nome, idade, cpf, tipo_usuario) VALUES
('Ana Silva', 28, '12345678901', 'fornecedor'),
('Bruno Costa', 35, '23456789012', 'cliente'),
('Carlos Lima', 42, '34567890123', 'admin'),
('Daniela Souza', 19, '45678901234', 'cliente'),
('Eduardo Alves', 50, '56789012345', 'fornecedor'),
('Fernanda Rocha', 31, '67890123456', 'admin'),
('Gabriel Pinto', 22, '78901234567', 'cliente'),
('Helena Dias', 27, '89012345678', 'cliente'),
('Igor Martins', 33, '90123456789', 'cliente'),
('Juliana Melo', 45, '01234567890', 'fornecedor');


INSERT INTO categorias (tipo, restricao_idade) VALUES
('Show', '18+'),
('Teatro', '12+'),
('Esporte', 'Livre'),
('Cinema', '16+'),
('Festival', '18+'),
('Infantil', 'Livre'),
('Palestra', '14+'),
('Religioso', 'Livre'),
('Feira', 'Livre'),
('Stand-up', '16+');


INSERT INTO status_evento (descricao) VALUES
('Agendado'),
('Em andamento'),
('Concluído'),
('Cancelado'),
('Adiado'),
('Venda encerrada'),
('Aguardando confirmação'),
('Remarcado'),
('Suspenso'),
('Novo');


INSERT INTO eventos (data_evento, nome, descricao, status_evento_id) VALUES
('2025-07-10', 'Rock in Park', 'Festival de rock ao ar livre', 1),
('2025-07-15', 'Teatro Arte Livre', 'Peça teatral dramática', 2),
('2025-07-20', 'Copa Cidade', 'Campeonato regional de futebol', 1),
('2025-07-25', 'Cinema à Luz da Lua', 'Exibição de filme clássico', 3),
('2025-08-01', 'Congresso TI', 'Palestras e workshops sobre tecnologia', 1),
('2025-08-05', 'Feira da Saúde', 'Atividades e informações sobre saúde', 1),
('2025-08-10', 'Stand-up Night', 'Noite de comédia ao vivo', 4),
('2025-08-15', 'Show Pop Nacional', 'Apresentação de artistas pop', 2),
('2025-08-20', 'Festival Infantil', 'Atividades para crianças', 1),
('2025-08-25', 'Culto ao Ar Livre', 'Celebração religiosa comunitária', 3);


INSERT INTO lotes (quantidade, validade_ticket, eventos_id) VALUES
(100, '2025-07-09 23:59:59', 1),
(200, '2025-07-14 23:59:59', 2),
(150, '2025-07-19 23:59:59', 3),
(120, '2025-07-24 23:59:59', 4),
(300, '2025-07-31 23:59:59', 5),
(180, '2025-08-04 23:59:59', 6),
(250, '2025-08-09 23:59:59', 7),
(100, '2025-08-14 23:59:59', 8),
(400, '2025-08-19 23:59:59', 9),
(350, '2025-08-24 23:59:59', 10);


INSERT INTO notificacoes (id, tipo, mensagem, lida, data_notificacao, usuario_id) VALUES
(1, 'Evento', 'Seu ingresso foi confirmado.', 0, '2025-06-01 10:00:00', 1),
(2, 'Promoção', 'Desconto para evento infantil.', 1, '2025-06-02 11:30:00', 2),
(3, 'Lembrete', 'Evento amanhã às 19h.', 0, '2025-06-03 09:15:00', 1),
(4, 'Sistema', 'Atualização no aplicativo.', 1, '2025-06-20 08:45:00', 4),
(5, 'Evento', 'Novo evento Congresso de TI', 0, '2025-06-05 13:20:00', 5),
(6, 'Cancelamento', 'Evento Rock in Park foi adiado', 0, '2025-05-06 12:00:00', 2),
(7, 'Promoção', 'Cupom de 10% OFF.', 1, '2025-06-07 17:50:00', 7),
(8, 'Lembrete', 'Apresente seu ticket na entrada.', 1, '2025-06-10 14:30:00', 7),
(9, 'Sistema', 'Nova funcionalidade disponível.', 0, '2025-04-10 16:10:00', 9),
(10, 'Evento', 'Ingressos esgotando!', 0, '2025-06-22 18:40:00', 4);


INSERT INTO locais (cidade, bairro, ponto_referencia, evento_id) VALUES
('São Paulo', 'Centro', 'Praça Central', 2),
('Rio de Janeiro', 'Copacabana', 'Praia Posto 5', 2),
('Belo Horizonte', 'Savassi', 'Teatro Municipal', 3),
('Curitiba', 'Batel', 'Shopping Crystal', 4),
('Porto Alegre', 'Moinhos', 'Parque Moinhos de Vento', 2),
('Salvador', 'Barra', 'Farol da Barra', 4),
('Fortaleza', 'Meireles', 'Beira Mar', 7),
('Brasília', 'Asa Sul', 'Centro de Convenções', 5),
('Recife', 'Boa Viagem', 'Praia', 9),
('Florianópolis', 'Centro', 'Mercado Público', 5);


INSERT INTO tickets (data_compra, meia_entrada, lote_id, usuario_id, evento_id) VALUES
('2025-06-01 10:00:00', 0, 1, 1, 1),
('2025-06-01 11:00:00', 0, 2, 4, 2),
('2025-06-02 09:00:00', 0, 3, 3, 2),
('2025-06-02 12:30:00', 1, 4, 7, 4),
('2025-06-03 15:00:00', 1, 5, 5, 5),
('2025-06-04 13:45:00', 1, 6, 6, 6),
('2025-06-05 14:15:00', 0, 7, 7, 4),
('2025-06-06 16:00:00', 1, 8, 8, 8),
('2025-06-07 17:30:00', 0, 9, 2, 4),
('2025-06-08 18:00:00', 1, 10, 2, 1);


INSERT INTO cobrancas (data_compra, tipo, valor_evento, usuario_id, tickets_id) VALUES
('2025-06-01 10:01:00', 'Crédito', 150.00, 1, 1),
('2025-06-01 11:01:00', 'Débito', 75.00, 2, 2),
('2025-06-02 09:01:00', 'PIX', 120.00, 3, 2),
('2025-06-02 12:31:00', 'Crédito', 90.00, 4, 3),
('2025-06-03 15:01:00', 'PIX', 200.00, 5, 1),
('2025-06-04 13:46:00', 'Débito', 85.00, 6, 4),
('2025-06-05 14:16:00', 'Crédito', 160.00, 7, 5),
('2025-06-06 16:01:00', 'Crédito', 110.00, 8, 5),
('2025-06-07 17:31:00', 'PIX', 190.00, 9, 8),
('2025-06-08 18:01:00', 'Débito', 130.00, 10, 8);


INSERT INTO categoria_evento (categoria_id, evento_id) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5),
(6, 6),
(7, 7),
(8, 8),
(9, 9),
(10, 10);

-- Listar quantos usuários compraram os ticket pelo meio de pagamento PIX

SELECT 
	COUNT(DISTINCT u.id)
FROM usuarios AS u
JOIN cobrancas AS c ON u.id = c.usuario_id
	WHERE c.tipo = 'PIX';
    
-- Listar a quantidade de usuários do tipo cliente que compraram tickets em um evento pertencente a alguma cidade do sul do país

SELECT 
	l.cidade, COUNT(DISTINCT u.id) as total_usuarios
FROM usuarios as u
JOIN tickets as t on t.usuario_id = u.id
JOIN eventos as e on t.evento_id = e.id
JOIN locais as l on l.evento_id = e.id
	WHERE u.tipo_usuario = 'cliente' AND l.cidade IN ('Porto Alegre', 'Florianopolis', 'Curitiba')
GROUP BY l.cidade;

-- Listar as cobranças pagas no 'CRÉDITO' nos tickets do menor para o maior e o seu respectivos eventos 
SELECT 
	c.id, 
	c.valor_evento, 
    e.nome as evento

FROM cobrancas as c
JOIN tickets as t on c.tickets_id = t.id
JOIN eventos as e on t.evento_id = e.id
WHERE c.tipo = 'Crédito'
ORDER BY c.valor_evento ASC;

-- Procedure para criar um nova compra de ticket, mas com a restrição de comprar apenas 3 no máximo

DELIMITER $
CREATE PROCEDURE comprar_tickets(
  IN p_usuario_id INT,
  IN p_evento_id INT,
  IN p_lote_id INT,
  IN p_meia_entrada TINYINT,
  IN p_data_compra DATETIME,
  IN p_tipo_pagamento VARCHAR(255),
  IN p_valor DECIMAL(6,2)
)
BEGIN
  DECLARE qtd_tickets INT;

  -- Verifica quantos tickets o usuário já comprou para este evento
  SELECT COUNT(*) INTO qtd_tickets
  FROM tickets
  WHERE usuario_id = p_usuario_id AND evento_id = p_evento_id;

  IF qtd_tickets >= 3 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'Limite de 3 tickets por usuário para este evento excedido.';
  ELSE
    -- Insere novo ticket
    INSERT INTO tickets (data_compra, meia_entrada, lote_id, usuario_id, evento_id)
    VALUES (p_data_compra, p_meia_entrada, p_lote_id, p_usuario_id, p_evento_id);

    -- Recupera o ID do ticket recém-inserido
    SET @ticket_id = LAST_INSERT_ID();

    -- Insere cobrança vinculada
    INSERT INTO cobrancas (data_compra, tipo, valor_evento, usuario_id, tickets_id)
    VALUES (p_data_compra, p_tipo_pagamento, p_valor, p_usuario_id, @ticket_id);
  END IF;
END$

DELIMITER;


-- CALL comprar_tickets(
--  1,           -- usuário_id
--  2,           -- evento_id
--  1,           -- lote_id
--  0,           -- meia_entrada
--  NOW(),       -- data_compra
--  'PIX',       -- tipo_pagamento
--  120.00       -- valor
-- );


DELIMITER $
CREATE PROCEDURE calcular_media_por_forma_de_pagamento(IN p_tipo VARCHAR(255))
BEGIN 
  DECLARE v_media DECIMAL(6,2);

  SELECT AVG(valor_evento)
  INTO v_media
  FROM cobrancas
  WHERE tipo = p_tipo;

  SELECT CONCAT('Média para a forma de pagamento ', p_tipo, ' é: ', v_media) AS resultado;
END $
DELIMITER

DELIMITER $
CREATE PROCEDURE separar_cidades_por_regiao()
BEGIN 
	SELECT cidade, 
    CASE 
		WHEN cidade in ("Curitiba","Porto Alegre","Florianópolis") THEN 'SUL'
        WHEN cidade in ("Rio de Janeiro","São Paulo","Belo Horizonte") THEN 'Sudeste'
        WHEN cidade IN ('Salvador', 'Recife', 'Fortaleza') THEN 'Nordeste'
	ELSE 'Outras'
    END AS regiao
    
    FROM locais
    GROUP BY cidade;
END $
DELIMITER

-- --------------------------------------------------------------
DELIMITER $$

CREATE FUNCTION calcular_total_gasto_por_usuario(p_usuario_id INT)
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
  DECLARE total DECIMAL(10,2);

  SELECT SUM(valor_evento)
  INTO total
  FROM cobrancas
  WHERE usuario_id = p_usuario_id;

  RETURN IFNULL(total, 0.00);
END$$

DELIMITER ;

-- SELECT 
--  id, 
--  nome, 
--  calcular_total_gasto_por_usuario(id) AS total_gasto
-- FROM usuarios;
-- -----------------------------------------------------------

DELIMITER $
CREATE FUNCTION verificar_limite_tickets_usuario_evento(p_usuario_id INT, p_evento_id INT)
RETURNS INT
DETERMINISTIC
BEGIN
  DECLARE qtd INT;

  SELECT COUNT(*)
  INTO qtd
  FROM tickets
  WHERE usuario_id = p_usuario_id AND evento_id = p_evento_id;

  RETURN qtd;
END $
DELIMITER;

SELECT 
  u.nome, 
  e.nome as evento,
  verificar_limite_tickets_usuario_evento(u.id, e.id) as qtde_comprado
FROM usuarios u
JOIN tickets t ON t.usuario_id = u.id
JOIN eventos e ON e.id = t.evento_id
GROUP BY u.id, e.id;

DELIMITER $
CREATE TRIGGER insercao_apos_novo_ticket 
AFTER INSERT ON tickets
FOR EACH ROW 
BEGIN
	INSERT INTO log_compras (ticket_id, usuario_id, evento_id, data_compra, acao)
  VALUES 
	(NEW.id, NEW.usuario_id, NEW.evento_id, NEW.data_compra, 'REALIZADO INSERT');
END $
DELIMITER 

DELIMITER $
CREATE TRIGGER insercao_log_nova_cobranca
AFTER INSERT ON cobrancas
FOR EACH ROW
BEGIN
  INSERT INTO log_cobrancas (data_log, usuario_id, tickets_id, tipo_pagamento, valor, acao)
  VALUES (NOW(), NEW.usuario_id, NEW.tickets_id, NEW.tipo, NEW.valor_evento, 'REALIZADO INSERT');
END$
DELIMITER ;

-- CURSOR para demonstrar a linha toda de tabelas
DELIMITER $ 
CREATE PROCEDURE gerar_relatorio_tickets()
BEGIN
	DECLARE fim INT DEFAULT 0;
    DECLARE v_usuario_id INT;
    DECLARE v_nome VARCHAR(255);
    DECLARE v_tot_tickets INT;
    
    DECLARE cur_usuarios CURSOR FOR
		SELECT id, nome FROM usuarios;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET fim = 1;
    
    OPEN cur_usuarios;
    
    myloop: LOOP 
		FETCH cur_usuarios INTO v_usuario_id, v_nome;
	IF fim THEN
		LEAVE myloop;
	END IF;
    
    SELECT COUNT(*) INTO v_tot_tickets
	FROM tickets
    WHERE usuario_id = v_usuario_id;
    
    INSERT INTO relatorio_tickets_usuarios (usuario_id, nome_usuario, total_tickets)
    VALUES (v_usuario_id, v_nome, v_tot_tickets);
  END LOOP;
    
    CLOSE cur_usuarios; -- -> lembrar de destruir cursor para não haver vazamento de memória
END $
DELIMITER 

-- CALL gerar_relatorio_tickets();

-- SELECT * FROM relatorio_tickets_usuarios;

-- drop procedure if exists gerar_relatorio_tickets;

-- Primeira view para relatório de compras dos usuários

CREATE OR REPLACE VIEW vw_relatorio_compras_usuarios AS
SELECT
  u.id AS usuario_id,
  u.nome AS nome_usuario,
  e.nome AS nome_evento,
  c.tipo AS forma_pagamento,
  c.valor_evento AS valor_pago,
  c.data_compra
FROM usuarios u
JOIN tickets t ON t.usuario_id = u.id
JOIN eventos e ON e.id = t.evento_id
JOIN cobrancas c ON c.tickets_id = t.id;

-- SELECT * FROM vw_relatorio_compras_usuarios
-- WHERE forma_pagamento = 'PIX';

-- Segunda view para relatorio de eventos e suas respectivas cidades
CREATE OR REPLACE VIEW vw_eventos_com_cidade_e_status AS 
SELECT 
	e.id AS evento_id, 
    e.nome AS nome_evento, 
    l.cidade, 
    s.descricao as status_evento,
    e.data_evento
FROM eventos e
JOIN locais l ON l.evento_id = e.id
JOIN status_evento s ON s.id = e.status_evento_id;

SELECT * FROM vw_eventos_com_cidade_e_status
WHERE cidade = 'Curitiba' AND status_evento = 'Agendado';

-- DROP VIEW IF EXISTS vw_eventos_com_cidade_e_status; 

DELIMITER $
CREATE PROCEDURE inserir_cobranca_ticket(
					IN p_data_compra DATETIME, IN p_meia_entrada INT, IN p_lote_id INT, 
					IN p_usuario_id INT, IN p_evento_id INT, IN p_tipo VARCHAR(255), 
                    IN valor_evento DECIMAL(6,2))
BEGIN
	START TRANSACTION;
    
    INSERT INTO tickets (data_compra, meia_entrada, lote_id, usuario_id, evento_id)
		VALUES (p_data_compra, p_meia_entrada, p_lote_id, p_usuario_id, p_evento_id);
	
    SET @ticket_id = LAST_INSERT_ID();
    
    INSERT INTO cobrancas (data_compra, tipo, valor_evento, usuario_id, tickets_id)
	VALUES (p_data_compra, p_tipo, valor_evento, p_usuario_id, @ticket_id);
    
    COMMIT; -- Se tudo der certo. 
END $
DELIMITER 

CALL inserir_cobranca_ticket(
	NOW(),         -- data_compra
    0,             -- meia_entrada
    1,             -- lote_id
    5,             -- usuario_id
    3,             -- evento_id
    'PIX',         -- tipo
    120.00         -- valor_evento
);

-- Travamento de tabelas para evitar concorrência

LOCK TABLES tickets WRITE;

-- Inserção ou atualização crítica
UPDATE tickets SET meia_entrada = 1 WHERE id = 10;

UNLOCK TABLES;
 
